{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8081/api/cart/add'; // Update with your backend API URL\n    this.cartItems = [];\n  }\n  addToCart(product) {\n    const existingItem = this.cartItems.find(item => item.id === product.id);\n    if (existingItem) {\n      existingItem.quantity += 1;\n      this.saveCart(existingItem); // Call saveCart with the updated existing item\n    } else {\n      const newItem = {\n        id: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.image,\n        quantity: 1\n      };\n      this.cartItems.push(newItem);\n      this.saveCart(newItem); // Call saveCart with the new item\n    }\n  }\n\n  saveCart(product) {\n    const observer = {\n      next: response => {\n        console.log('Item added to cart successfully');\n      },\n      error: error => {\n        console.error('Failed to add item to cart', error);\n      },\n      complete: () => {\n        // Optional: Add any logic to execute when the operation is complete\n      }\n    };\n    this.http.post('/api/cart/add', product).subscribe(observer);\n  }\n  // saveCart(product: Product) {\n  //   console.log(product);\n  //   return this.http.post(`${this.apiUrl}`, product).subscribe(\n  //     response => {\n  //       console.log('Item saved to database:', response);\n  //     },\n  //     error => {\n  //       console.error('Error saving item to database:', error);\n  //     }\n  //   );\n  // }\n  removeFromCart(productId) {\n    const index = this.cartItems.findIndex(item => item.id === productId);\n    if (index !== -1) {\n      this.cartItems.splice(index, 1); // Remove item from the cart\n    }\n  }\n\n  getCartItems() {\n    return this.cartItems;\n  }\n  getTotalPrice() {\n    return this.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n  }\n  clearCart() {\n    this.cartItems = [];\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,oCAAoC,CAAC,CAAC;IAEvD,cAAS,GAAe,EAAE;EAEc;EAExCC,SAAS,CAACC,OAAY;IACpB,MAAMC,YAAY,GAAG,IAAI,CAACC,SAAS,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;IACxE,IAAIJ,YAAY,EAAE;MAChBA,YAAY,CAACK,QAAQ,IAAI,CAAC;MAC1B,IAAI,CAACC,QAAQ,CAACN,YAAY,CAAC,CAAC,CAAC;KAC9B,MAAM;MACL,MAAMO,OAAO,GAAa;QACxBH,EAAE,EAAEL,OAAO,CAACK,EAAE;QACdI,IAAI,EAAET,OAAO,CAACS,IAAI;QAClBC,KAAK,EAAEV,OAAO,CAACU,KAAK;QACpBC,KAAK,EAAEX,OAAO,CAACW,KAAK;QACpBL,QAAQ,EAAE;OACX;MACD,IAAI,CAACJ,SAAS,CAACU,IAAI,CAACJ,OAAO,CAAC;MAC5B,IAAI,CAACD,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAC;;EAE5B;;EACAD,QAAQ,CAACP,OAAgB;IACvB,MAAMa,QAAQ,GAAkB;MAC9BC,IAAI,EAAEC,QAAQ,IAAG;QACfC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAChD,CAAC;MACDC,KAAK,EAAEA,KAAK,IAAG;QACbF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC;MACDC,QAAQ,EAAE,MAAK;QACb;MAAA;KAEH;IAED,IAAI,CAACrB,IAAI,CAACsB,IAAI,CAAC,eAAe,EAAEpB,OAAO,CAAC,CAACqB,SAAS,CAACR,QAAQ,CAAC;EAC9D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAS,cAAc,CAACC,SAAiB;IAC9B,MAAMC,KAAK,GAAG,IAAI,CAACtB,SAAS,CAACuB,SAAS,CAACrB,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKkB,SAAS,CAAC;IACrE,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACtB,SAAS,CAACwB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;;EAErC;;EAEAG,YAAY;IACV,OAAO,IAAI,CAACzB,SAAS;EACvB;EAEA0B,aAAa;IACX,OAAO,IAAI,CAAC1B,SAAS,CAAC2B,MAAM,CAAC,CAACC,KAAK,EAAE1B,IAAI,KAAK0B,KAAK,GAAG1B,IAAI,CAACM,KAAK,GAAGN,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;EACtF;EAEAyB,SAAS;IACP,IAAI,CAAC7B,SAAS,GAAG,EAAE;EACrB;;AApEWN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YAFV;AAAM","names":["CartService","constructor","http","addToCart","product","existingItem","cartItems","find","item","id","quantity","saveCart","newItem","name","price","image","push","observer","next","response","console","log","error","complete","post","subscribe","removeFromCart","productId","index","findIndex","splice","getCartItems","getTotalPrice","reduce","total","clearCart","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\235892\\Desktop\\Final Project\\Capstone-new\\src\\app\\Services\\cart.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { CartItem } from '../Model/cart';\r\nimport { Product } from '../Model/product';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private apiUrl = 'http://localhost:8081/api/cart/add'; // Update with your backend API URL\r\n\r\n  cartItems: CartItem[] = [];\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addToCart(product: any): void {\r\n    const existingItem = this.cartItems.find(item => item.id === product.id);\r\n    if (existingItem) {\r\n      existingItem.quantity += 1;\r\n      this.saveCart(existingItem); // Call saveCart with the updated existing item\r\n    } else {\r\n      const newItem: CartItem = {\r\n        id: product.id,\r\n        name: product.name,\r\n        price: product.price,\r\n        image: product.image,\r\n        quantity: 1\r\n      };\r\n      this.cartItems.push(newItem);\r\n      this.saveCart(newItem); // Call saveCart with the new item\r\n    }\r\n  }\r\n  saveCart(product: Product): void {\r\n    const observer: Observer<any> = {\r\n      next: response => {\r\n        console.log('Item added to cart successfully');\r\n      },\r\n      error: error => {\r\n        console.error('Failed to add item to cart', error);\r\n      },\r\n      complete: () => {\r\n        // Optional: Add any logic to execute when the operation is complete\r\n      }\r\n    };\r\n  \r\n    this.http.post('/api/cart/add', product).subscribe(observer);\r\n  }\r\n  // saveCart(product: Product) {\r\n  //   console.log(product);\r\n  //   return this.http.post(`${this.apiUrl}`, product).subscribe(\r\n  //     response => {\r\n  //       console.log('Item saved to database:', response);\r\n  //     },\r\n  //     error => {\r\n  //       console.error('Error saving item to database:', error);\r\n  //     }\r\n  //   );\r\n  // }\r\n\r\n  removeFromCart(productId: number) {\r\n    const index = this.cartItems.findIndex(item => item.id === productId);\r\n    if (index !== -1) {\r\n      this.cartItems.splice(index, 1); // Remove item from the cart\r\n    }\r\n  }\r\n\r\n  getCartItems(): CartItem[] {\r\n    return this.cartItems;\r\n  }\r\n\r\n  getTotalPrice(): number {\r\n    return this.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\r\n  }\r\n\r\n  clearCart() {\r\n    this.cartItems = [];\r\n  }\r\n\r\n}\r\n\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class CartService {\r\n//   private apiUrl = 'http://localhost:8082/api/cart/add'; // Update with your backend API URL\r\n\r\n//   cartItems: CartItem[] = [];\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   addToCart(product: any): void {\r\n//     const existingItem = this.cartItems.find(item => item.id === product.id);\r\n//     if (existingItem) {\r\n//       existingItem.quantity += 1;\r\n//     } else {\r\n//       const newItem: CartItem = {\r\n//         id: product.id,\r\n//         name: product.name,\r\n//         price: product.price,\r\n//         image: product.image,\r\n//         quantity: 1\r\n//       };\r\n//       this.cartItems.push(newItem);\r\n//       // this.saveCart(product);\r\n//     }\r\n//   }\r\n\r\n//   removeFromCart(productId: number) {\r\n//     const index = this.cartItems.findIndex(item => item.id === productId);\r\n//     if (index !== -1) {\r\n//       this.cartItems.splice(index, 1); // Remove item from the cart\r\n//     }\r\n//   }\r\n\r\n//   getCartItems(): CartItem[] {\r\n//     return this.cartItems;\r\n//   }\r\n\r\n//   getTotalPrice(): number {\r\n//     return this.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\r\n//   }\r\n\r\n//   clearCart() {\r\n//     this.cartItems = [];\r\n//   }\r\n//   saveCart(product:Product){\r\n//     console.log(product);\r\n//     return this.http.post(`${this.apiUrl}`, product);\r\n//   }\r\n// }\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}